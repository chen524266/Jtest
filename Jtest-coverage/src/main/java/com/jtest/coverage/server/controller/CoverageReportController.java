package com.jtest.coverage.server.controller;import java.util.List;import com.Jtest.common.annotation.Log;import com.Jtest.common.core.controller.BaseController;import com.Jtest.common.core.domain.AjaxResult;import com.Jtest.common.core.page.TableDataInfo;import com.Jtest.common.enums.BusinessType;import com.Jtest.common.utils.poi.ExcelUtil;import com.jtest.coverage.server.domain.CoverageReport;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.jtest.coverage.server.service.ICoverageReportService;/** * 代码覆盖率服务Controller * * @author Jtest * @date 2024-09-02 */@Controller@RequestMapping("/server/report")public class CoverageReportController extends BaseController {    private String prefix = "server/report";    @Autowired    private ICoverageReportService coverageReportService;    @RequiresPermissions("server:report:view")    @GetMapping()    public String report() {        return prefix + "/report";    }    /**     * 查询代码覆盖率服务列表     */    @RequiresPermissions("server:report:list")    @PostMapping("/list")    @ResponseBody    public TableDataInfo list(CoverageReport coverageReport) {        startPage();        List<CoverageReport> list = coverageReportService.selectCoverageReportList(coverageReport);        return getDataTable(list);    }    /**     * 导出代码覆盖率服务列表     */    @RequiresPermissions("server:report:export")    @Log(title = "代码覆盖率服务", businessType = BusinessType.EXPORT)    @PostMapping("/export")    @ResponseBody    public AjaxResult export(CoverageReport coverageReport) {        List<CoverageReport> list = coverageReportService.selectCoverageReportList(coverageReport);        ExcelUtil<CoverageReport> util = new ExcelUtil<CoverageReport>(CoverageReport.class);        return util.exportExcel(list, "代码覆盖率服务数据");    }    /**     * 新增代码覆盖率服务     */    @GetMapping("/add")    public String add() {        return prefix + "/add";    }    /**     * 新增保存代码覆盖率服务     */    @RequiresPermissions("server:report:add")    @Log(title = "代码覆盖率服务", businessType = BusinessType.INSERT)    @PostMapping("/add")    @ResponseBody    public AjaxResult addSave(CoverageReport coverageReport) {        return toAjax(coverageReportService.insertCoverageReport(coverageReport));    }    /**     * 修改代码覆盖率服务     */    @RequiresPermissions("server:report:edit")    @GetMapping("/edit/{reportId}")    public String edit(@PathVariable("reportId") int reportId, ModelMap mmap) {        CoverageReport coverageReport = coverageReportService.selectCoverageReportByReportId(reportId);        mmap.put("coverageReport", coverageReport);        return prefix + "/edit";    }    /**     * 修改保存代码覆盖率服务     */    @RequiresPermissions("server:report:edit")    @Log(title = "代码覆盖率服务", businessType = BusinessType.UPDATE)    @PostMapping("/edit")    @ResponseBody    public AjaxResult editSave(CoverageReport coverageReport) {        return toAjax(coverageReportService.updateCoverageReport(coverageReport));    }    /**     * 删除代码覆盖率服务     */    @RequiresPermissions("server:report:remove")    @Log(title = "代码覆盖率服务", businessType = BusinessType.DELETE)    @PostMapping("/remove")    @ResponseBody    public AjaxResult remove(String ids) {        return toAjax(coverageReportService.deleteCoverageReportByReportIds(ids));    }    /**     * 合并覆盖率报告，支持多个报告合并     */    @Log(title = "代码覆盖率服务", businessType = BusinessType.UPDATE)    @PostMapping("/mergerReports")    @ResponseBody    public AjaxResult mergerReports(String ids) throws Exception {        CoverageReport merge = coverageReportService.mergerReports(ids);        return success(merge.getReportId().toString());    }}